# Modified from NeMo/examples/nlp/language_modeling/tuning/conf/megatron_gpt_sft.yaml
name: megatron_mistral_sft_codeact

trainer:
  devices: 2
  accelerator: gpu
  num_nodes: 1
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  # max_epochs: 5  # will be override by max_steps
  max_steps: ?? # 645 steps per epoch, 5 epochs, 3225 examples, 32 bsz, 3225/32=100.78125
  # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10 # frequency with which training steps are logged 
  val_check_interval: 0 # If is an int n > 1, will run val every n training steps, if a float 0.0 - 1.0 will run val every epoch fraction, e.g. 0.25 will run val every quarter epoch
  gradient_clip_val: 1.0

exp_manager:
  explicit_log_dir: null
  exp_dir: ???
  name: ${name}
  create_wandb_logger: True
  wandb_logger_kwargs:
    project: nemo-sft
    name: nemo-mistral-sft-codeact
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    save_nemo_on_train_end: True 
    every_n_train_steps: 20
    every_n_epochs: null
    filename: 'ckpt-step_{step}-{consumed_samples}'
    model_parallel_size: ${model.tensor_model_parallel_size}

model:
  seed: 42
  tensor_model_parallel_size: 2 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  global_batch_size: ??
  micro_batch_size: 1
  restore_from_path: ??? # Path to an existing p-tuned/prompt tuned .nemo model you wish to add new tasks to or run inference with
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  save_nemo_on_validation_end: True # Saves an inference ready .nemo file every time a checkpoint is saved during training. 
  sync_batch_comm: False
  megatron_amp_O2: False

  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: False

  ## Activation Checkpoint
  activations_checkpoint_granularity: full # null # 'selective' or 'full'
  activations_checkpoint_method: uniform # 'uniform', 'block', not used with 'selective'
  # 'uniform' divides the total number of transformer layers and checkpoints the input activation
  # of each chunk at the specified granularity
  # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
  activations_checkpoint_num_layers: 2 # not used with 'selective'
  activations_checkpoint_layers_per_pipeline: null
  answer_only_loss: True
  gradient_as_bucket_view: False

  hidden_dropout: 0.0
  attention_dropout: 0.0
  ffn_dropout: 0.0

  # FSDP
  fsdp: False # Enable training with torch FSDP.
  fsdp_sharding_strategy: 'full' # Method to shard model states. Available options are 'full', 'hybrid', and 'grad'.
  fsdp_grad_reduce_dtype: 'fp32' # Gradient reduction data type.
  fsdp_sharded_checkpoint: False # Store and load FSDP shared checkpoint.
  fsdp_use_orig_params: False # Set to True to use FSDP for specific peft scheme.

  peft:
    peft_scheme: null # "adapter"  # can be either adapter,ia3, or ptuning
    restore_from_path: null

    # # Used for adapter peft training
    # adapter_tuning:
    #   type: 'parallel_adapter' # this should be either 'parallel_adapter' or 'linear_adapter'
    #   adapter_dim: 32
    #   adapter_dropout: 0.0
    #   norm_position: 'pre' # This can be set to 'pre', 'post' or null, 'pre' is normally what is used.
    #   column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
    #   row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
    #   norm_type: 'mixedfusedlayernorm' # IGNORED if layer_adapter is used,  options are ['layernorm', 'mixedfusedlayernorm']
    #   layer_selection: null  # selects in which layers to add adapters, e.g. [1,12] will add adapters to layer 1 (lowest) and 12. null will apply adapters to all layers
    #   weight_tying: False
    #   position_embedding_strategy: null # used only when weight_tying is True

    # lora_tuning:
    #   target_modules: ['attention_qkv','attention_dense','mlp_fc1','mlp_fc2'] # this can either be 'attention_qkv','attention_dense','mlp_fc1','mlp_fc2', attention (qkv & dense), mlp (fc1 & fc2)
    #   adapter_dim: 32
    #   alpha: ${model.peft.lora_tuning.adapter_dim} 
    #   adapter_dropout: 0.0
    #   column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
    #   row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
    #   layer_selection:  null  # selects in which layers to add lora adapters. e.g. [1,12] will add lora to layer 1 (lowest) and 12. null will apply adapters to all layers
    #   weight_tying: False
    #   position_embedding_strategy: null # used only when weight_tying is True

    # # Used for p-tuning peft training
    # p_tuning:
    #   virtual_tokens: 10  # The number of virtual tokens the prompt encoder should add at the start of the sequence
    #   bottleneck_dim: 1024  # the size of the prompt encoder mlp bottleneck
    #   embedding_dim: 1024  # the size of the prompt encoder embeddings
    #   init_std: 0.023

    # ia3_tuning:
    #   layer_selection:  null  # selects in which layers to add ia3 adapters. e.g. [1,12] will add lora to layer 1 (lowest) and 12. null will apply adapters to all layers
    
    # selective_tuning:
    #   tunable_base_param_names: ["self_attention", "word_embeddings"]  # TODO: regex support @adithyre

  data:
    train_ds:
      packed_sequence: True
      # Example of how to specify paths to multiple datasets
      # file_names: 
      #   - /path/to/squad.jsonl
      #   - /path/to/mnli.jsonl
      #   - /path/to/boolq.jsonl
      # Example of how each dataset is formatted
      # {'input': 'John von Neumann\nVon Neumann made fundamental contributions .... Q: What did the math of artificial viscosity do?', 'output': 'smoothed the shock transition without sacrificing basic physics'}
      file_names: ??? # Path to a list of JSONL files corresponding to the source data.
      global_batch_size: ${model.global_batch_size}
      micro_batch_size: ${model.micro_batch_size}
      shuffle: True
      num_workers: 8
      memmap_workers: null
      pin_memory: True
      max_seq_length: 16384
      min_seq_length: 1
      drop_last: True
      # Example of how to specify concat_sampling_probabilities
      # concat_sampling_probabilities:
      #   - 0.5
      #   - 0.25
      #   - 0.25
      concat_sampling_probabilities: null # When providing a list of datasets, this arg defines the sampling probabilities from each dataset when strategy='random'

    validation_ds:
      file_names: null # Path to a list of JSONL files corresponding to the source data. Data format is identical to train_ds.
      names: null # Names of the corresponding datasets used to log metrics.
    #   global_batch_size: ${model.global_batch_size}
    #   micro_batch_size: ${model.micro_batch_size}
    #   shuffle: False
    #   num_workers: 4
    #   memmap_workers: ${model.data.train_ds.memmap_workers}
    #   pin_memory: True
    #   max_seq_length: ${model.data.train_ds.max_seq_length}
    #   min_seq_length: 1
    #   drop_last: False
    #   label_key: ${model.data.train_ds.label_key}
    #   add_eos: ${model.data.train_ds.add_eos}
    #   add_sep: ${model.data.train_ds.add_sep}
    #   add_bos: ${model.data.train_ds.add_bos}
    #   write_predictions_to_file: False
    #   output_file_path_prefix: null # Prefix of the file to write predictions to.
    #   truncation_field: ${model.data.train_ds.truncation_field} # Options: keys in prompt_template
    #   index_mapping_dir: null # Path to a directory to write index mapping files.
    #   prompt_template: ${model.data.train_ds.prompt_template} # fstring to use for assistant prompt. Example: "Q: {input}\nA: {output}"
    #   tokens_to_generate: 32 # decide how many tokens we want to generate to evaluate performance with string metrics
    #   hf_dataset: False # Whether to load the json file with the HuggingFace dataset. otherwise, will load the jsonl file with the JSONLMemMapDataset.
    #   truncation_method: 'right' # Truncation from which position, Options: ['left', 'right'] 

      metric:
        name: "loss" # Name of the evaluation metric to use. Options: ['exact_string_match', 'loss', 'rouge', 'token_f1']
        average: null # Average the metric over the dataset. Options: ['macro', 'micro']. Works only for 'F1', 'accuracy' etc. Refer to torchmetrics for metrics where this is supported.
        num_classes: null

    # test_ds:
    #   file_names: ??? # Path to a list of JSONL files corresponding to the source data. Data format is identical to train_ds.
    #   names: null # Names of the corresponding datasets used to log metrics.
    #   global_batch_size: ${model.global_batch_size}
    #   micro_batch_size: ${model.micro_batch_size}
    #   shuffle: False
    #   num_workers: 4
    #   memmap_workers: ${model.data.train_ds.memmap_workers}
    #   pin_memory: True
    #   max_seq_length: ${model.data.train_ds.max_seq_length}
    #   min_seq_length: 1
    #   drop_last: False
    #   label_key: ${model.data.train_ds.label_key}
    #   add_eos: ${model.data.train_ds.add_eos}
    #   add_sep: ${model.data.train_ds.add_sep}
    #   add_bos: ${model.data.train_ds.add_bos}
    #   write_predictions_to_file: False
    #   output_file_path_prefix: null # Prefix of the file to write predictions to.
    #   truncation_field: ${model.data.train_ds.truncation_field} # Options: keys in prompt_template
    #   index_mapping_dir: null # Path to a directory to write index mapping files.
    #   prompt_template: ${model.data.train_ds.prompt_template} # fstring to use for assistant prompt. Example: "Q: {input}\nA: {output}"
    #   tokens_to_generate: 32 # decide how many tokens we want to generate to evaluate performance with string metrics
    #   hf_dataset: False # Whether to load the json file with the HuggingFace dataset. otherwise, will load the jsonl file with the JSONLMemMapDataset.
    #   truncation_method: 'right' # Truncation from which position, Options: Options: ['left', 'right']

    #   metric:
    #     name: "loss" # Name of the evaluation metric to use. Options: ['exact_string_match', 'loss']
    #     average: null # Average the metric over the dataset. Options: ['macro', 'micro']. Works only for 'F1', 'accuracy' etc. Refer to torchmetrics for metrics where this is supported.
    #     num_classes: null

  optim:
    name: fused_adam # Supports distributed optimizer for memory savings. To enable, set to 'distributed_fused_adam'. Needs Apex to be built with specific args to work.
    lr: 1e-5

    weight_decay: 0.01 
    betas: 
    - 0.9
    - 0.98

    sched:
      name: CosineAnnealing
      # scheduler config override
      warmup_ratio: 0.1   # Warmup steps will be 10% of the training steps.
      min_lr: 1e-6


# inference:
#   greedy: True # Whether or not to use sampling ; use greedy decoding otherwise
#   top_k: 0  # The number of highest probability vocabulary tokens to keep for top-k-filtering.
#   top_p: 0.9 # If set to float < 1, only the most probable tokens with probabilities that add up to top_p or higher are kept for generation.
#   temperature: 1.0 # sampling temperature
#   all_probs: False  # whether return the log prob for all the tokens in vocab
#   repetition_penalty: 1.2  # The parameter for repetition penalty. 1.0 means no penalty.
#   min_tokens_to_generate: 0  # The minimum length of the sequence to be generated.
#   compute_logprob: False  # a flag used to compute logprob of all the input text, a very special case of running inference, default False
#   compute_attention_mask: True
